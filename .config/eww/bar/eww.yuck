;; VARIABLES
;; workspaces
(deflisten workspaces :initial "[]" "sh ~/.config/eww/bar/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "sh ~/.config/eww/bar/scripts/get-active-workspace")

;; time
(defpoll clock_hour :interval "1m" "date +\%I")
(defpoll clock_minute :interval "1s" "date +\%M")
(defpoll clock_date_day :interval "1h" "date +\%d")
(defpoll clock_date_month :interval "1h" "date +\%m")

;; music 
(defpoll song :interval "1s" "~/.config/eww/bar/scripts/music --song")
(defpoll artist :interval "1s" "~/.config/eww/bar/scripts/music --artist")
(defpoll album :interval "1s" "~/.config/eww/bar/scripts/music --album")
(defpoll music_status :interval "5s" "~/.config/eww/bar/scripts/music --status")

;; wifi
(defpoll ESSID_WLAN :interval "2s" "~/.config/eww/bar/scripts/wifi --essid")
(defpoll WLAN_ICON :interval "1s" "~/.config/eww/bar/scripts/wifi --icon")

;; volume
(defpoll volume_percent :interval "1s" "./scripts/volume --volume")
(defpoll volume_icon :interval "1s" "./scripts/volume --icon")

;; brightness
(defpoll brightness_percent :interval "1s" "light")

;; battery
(defpoll battery :interval "30s" "./scripts/battery --bat")
(defpoll battery_status :interval "10s" "./scripts/battery --bat-st")

;; memory
(defpoll memory :interval "2s" "scripts/memory")

;; cpu
(defpoll cpu :interval "2s" "scripts/cpu")

;; REVEALERS
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_rev false)
(defvar wifi_rev false)
(defvar time_rev false)
(defvar bat_rev false)
(defvar mem_rev false)
(defvar cpu_rev false)


;; WIDGETS
;; SEPARATOR
(defwidget sep []
  (box 
    :class "module-2" 
    :vexpand "false" 
    :hexpand "false"
    (label 
        :class "separ" 
        :text "|")))

;; WORKSPACES
;; (defwidget workspaces[]
    ;; (literal  
        ;; :content workspace))

(defwidget workspaces[]
    (eventbox 
        :onscroll "sh ~/.config/eww/bar/scripts/change-active-workspace {} ${current_workspace}" 
        (box 
            :space-evenly true
            :class "works"
            (for workspace in workspaces
                (eventbox 
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    (box 
                        :class "workspace-entry ${workspace.id == current_workspace ? "workspace-current" : "workspace"}"
                        (label 
                            :text "${workspace.id == current_workspace ? "" : ""}")))))))

;; MUSIC
(defwidget music []
    (eventbox
        :onclick "~/.config/eww/bar/scripts/music --toggle && ${EWW_CMD} update music_status=${music_status == 'Playing' ? '' : 'Playing'}"
        :onhover "${EWW_CMD} update music_rev=true"
        :onhoverlost "${EWW_CMD} update music_rev=false"
        (box
            :class "music"
            :spacing "10"
            :space-evenly false
            :limit-width 5
            (label
                :text "${music_status == 'Playing' ? '||' : '|>'}")
            (label
                :text song)
            (revealer 
                :transition "slideleft" 
                :reveal music_rev
                :duration "350ms"
                (label
                    :text " - ${artist}")))))
        
  
;; CLOCK / DATE
(defwidget clock_module []
    (eventbox 
        :onhover "${EWW_CMD} update time_rev=true"
	    :onhoverlost "${EWW_CMD} update time_rev=false"
        (box 
            :class "module" 
            :space-evenly "false" 
            :orientation "h" 
            :spacing "3" 
        (label 
            :text clock_hour 
            :class "clock_hour_class" )
        (label 
            :text ":" 
            :class "clock_time_sep" )
        (label 
            :text clock_minute 
            :class "clock_minute_class")
	    (revealer 
            :transition "slideleft"
	    	:reveal time_rev
	    	:duration "350ms"
            (button 
                :class "clock_date_class"
                :onclick "scripts/pop calendar"
                (box
                    (sep)
                    (label 
                        :text clock_date_day 
                        :class "clock_date_day")
                    (label 
                        :text "/" 
                        :class "clock_date_sep")
                    (label 
                        :text clock_date_month 
                        :class "clock_date_month")))))))

;; WIFI
(defwidget wifi []
(eventbox 
    :onhover "${EWW_CMD} update wifi_rev=true"
    :onhoverlost "${EWW_CMD} update wifi_rev=false"
    (box 
        :orientation "h" 
        :spacing "3"
        :space-evenly "false"
        (label 
            :class "wifi-icon" 
            :text WLAN_ICON)
        (revealer 
            :transition "slideleft" 
            :reveal wifi_rev
            :duration "350ms"
            :class "wifi"
            (label
                :class "wifi-text"
                :text ESSID_WLAN 
                :limit-width 12)))))

;; VOLUME
(defwidget volume []
(eventbox 
    :onhover "${EWW_CMD} update vol_reveal=true"
	:onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
	    (button   
            :onclick "scripts/pop audio"
            :class "volume_icon" "${volume_icon}")
	    (revealer 
            :transition "slideleft"
		    :reveal vol_reveal
			:duration "350ms"
	        (scale    
                :class "volbar"
			    :value volume_percent
			    :orientation "h"
			    :tooltip "${volume_percent}%"
			    :max 100
			    :min 0
			    :onchange "amixer -D pulse sset Master {}%" )))))

;; BRIGHTNESS
(defwidget bright []
(eventbox 
    :onhover "${EWW_CMD} update br_reveal=true" 
    :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box 
        :class "module-2" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
        (label 
            :text "☀" 
            :class "bright_icon" 
            :tooltip "brightness")
	    (revealer :transition "slideleft"
		    :reveal br_reveal
			:duration "350ms"
	        (scale    
                :class "brightbar"
			    :value brightness_percent
			    :orientation "h"
			    :tooltip "${brightness_percent}%"
			    :max 100
			    :min 0
			    :onchange "brightnessctl set {}%" )))))

;; BATTERY
(defwidget bat []
(eventbox 
    :onhover "${EWW_CMD} update bat_rev=true"
	:onhoverlost "${EWW_CMD} update bat_rev=false"
	(box 
        :class "bat_module"
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3"
        (circular-progress 
            :value battery
            :class {battery <= 20 ? "batbar-low" : "batbar"}
            :thickness 2
            (button 
                :class "iconbat"
                :limit-width 2
                :tooltip "battery on ${battery}%"
                :show_truncated false
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :wrap false
                ""))
            (revealer 
                :transition "slideleft"
                :reveal bat_rev
                :duration "350ms"
                (label
                    :class "val-text"
                    :text "${battery}%")))))

;; MEMORY
(defwidget mem []
(eventbox 
    :onhover "${EWW_CMD} update mem_rev=true"
	:onhoverlost "${EWW_CMD} update mem_rev=false"
    (box 
        :class "mem_module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3"
        (circular-progress 
            :value memory
            :class "membar"
            :thickness 2
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${memory}% ram"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :show_truncated false
                :wrap false
                ""))
            (revealer 
                :transition "slideleft"
                :reveal mem_rev
                :duration "350ms"
                (label
                    :class "val-text"
                    :text "${memory}%")))))

;; CPU
(defwidget cpu []
(eventbox 
    :onhover "${EWW_CMD} update cpu_rev=true"
	:onhoverlost "${EWW_CMD} update cpu_rev=false"
    (box 
        :class "cpu_module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3"
        (circular-progress 
            :value cpu
            :class "cpubar"
            :thickness 2
            (button 
                :class "iconcpu"
                :limit-width 2
                :tooltip "using ${cpu}% cpu"
                :show_truncated false
                :wrap false
                ""))
            (revealer 
                :transition "slideleft"
                :reveal cpu_rev
                :duration "350ms"
                (label  
                    :class "val-text"
                    :text "${cpu}%")))))

;; BAR
(defwidget right []
(box 
    :orientation "h" 
	:space-evenly false  
    :halign "end"
	:class "right_modules"
    (wifi)
    (volume)
    (bright)
    (bat)
    (mem)
    (cpu)))

(defwidget left []
(box 
    :orientation "h" 
	:space-evenly false  
    :halign "start"
	:class "left_modules"
    (workspaces)))

(defwidget center []
(box 
    :orientation "h" 
	:space-evenly false  
    :halign "center"
	:class "center_modules"
    :spacing 10
    (music)
    (clock_module)))

;; BAR
(defwindow bar
    :monitor 0
    :geometry
        (geometry 
            :x "0%"
            :y "7"
            :width "98%"
            :height "0%"
            :anchor "top center")
        :stacking "bg"
        :exclusive true
        :windowtype "dock"
    (box 
        :class "bar_class"
        :orientation "h"
        (left)
        (center)
        (right)))
