;; Variables
(defpoll clock_hour :interval "30m" "date +\%I")
(defpoll clock_minute :interval "30s" "date +\%M")
(defpoll clock_date_day :interval "1h" "date +\%d")
(defpoll clock_date_month :interval "1h" "date +\%m")

(defpoll volume_percent :interval "10ms" "./scripts/volume --volume")
(defpoll volume_icon :interval "10ms" "./scripts/volume --icon")

(defpoll brightness_percent :interval "100ms" "brightnessctl -m -d amdgpu_bl0 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")

(defpoll battery :interval "30s" "./scripts/battery --bat")
(defpoll battery_status :interval "1m" "./scripts/battery --bat-st")

(defpoll memory :interval "5s" "scripts/memory")
(defpoll cpu :interval "5s" "scripts/cpu")

(defpoll ESSID_WLAN :interval "5s" "~/.config/eww/bar/scripts/wifi --essid")
(defpoll WLAN_ICON :interval "1s" "~/.config/eww/bar/scripts/wifi --icon")

(deflisten workspace 
    "scripts/workspaces")

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(defvar bat_rev false)
(defvar mem_rev false)
(defvar cpu_rev false)


;; WIDGETS
;; SEPARATOR
(defwidget sep []
  (box 
    :class "module-2" 
    :vexpand "false" 
    :hexpand "false"
    (label 
        :class "separ" 
        :text "|")))

;; WORKSPACES
(defwidget workspaces[]
    (literal  
        :content workspace))

;; CLOCK / DATE
(defwidget clock_module []
  (eventbox 
    :onhover "${EWW_CMD} update time_rev=true"
	:onhoverlost "${EWW_CMD} update time_rev=false"
    (box 
        :class "module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
      (label 
        :text clock_hour 
        :class "clock_hour_class" )
      (label 
        :text ":" 
        :class "clock_time_sep" )
      (label 
        :text clock_minute 
        :class "clock_minute_class")
	  (revealer 
        :transition "slideleft"
		:reveal time_rev
		:duration "350ms"
        (button 
            :class "clock_date_class"
            :onclick "scripts/pop calendar"
            (box
                (sep)
                (label 
                    :text clock_date_day 
                    :class "clock_date_day")
                (label 
                    :text "/" 
                    :class "clock_date_sep")
                (label 
                    :text clock_date_month 
                    :class "clock_date_month")))))))

;; WIFI
(defwidget wifi []
(eventbox 
    :onhover "${EWW_CMD} update wifi_rev=true"
    :onhoverlost "${EWW_CMD} update wifi_rev=false"
    (box 
        :orientation "h" 
        :spacing "3"
        :space-evenly "false"
        (label 
            :class "wifi-icon" 
            :text WLAN_ICON)
        (revealer 
            :transition "slideleft" 
            :reveal wifi_rev
            :duration "350ms"
            :class "wifi"
            (label
                :class "wifi-text"
                :text ESSID_WLAN 
                :limit-width 12)))))

;; VOLUME
(defwidget volume []
(eventbox 
    :onhover "${EWW_CMD} update vol_reveal=true"
	:onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
	    (button   
            :onclick "scripts/pop audio"
            :class "volume_icon" "${volume_icon}")
	    (revealer 
            :transition "slideleft"
		    :reveal vol_reveal
			:duration "350ms"
	        (scale    
                :class "volbar"
			    :value volume_percent
			    :orientation "h"
			    :tooltip "${volume_percent}%"
			    :max 100
			    :min 0
			    :onchange "amixer -D pulse sset Master {}%" )))))

;; BRIGHTNESS
(defwidget bright []
(eventbox 
    :onhover "${EWW_CMD} update br_reveal=true" 
    :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box 
        :class "module-2" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
        (label 
            :text "â˜€" 
            :class "bright_icon" 
            :tooltip "brightness")
	    (revealer :transition "slideleft"
		    :reveal br_reveal
			:duration "350ms"
	        (scale    
                :class "brightbar"
			    :value brightness_percent
			    :orientation "h"
			    :tooltip "${brightness_percent}%"
			    :max 100
			    :min 0
			    :onchange "brightnessctl set {}%" )))))

;; BATTERY
(defwidget bat []
(eventbox 
    :onhover "${EWW_CMD} update bat_rev=true"
	:onhoverlost "${EWW_CMD} update bat_rev=false"
	(box 
        :class "bat_module"
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3"
        (circular-progress 
            :value battery
            :class "batbar"
            :thickness 2
            (button 
                :class "iconbat"
                :limit-width 2
                :tooltip "battery on ${battery}%"
                :show_truncated false
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :wrap false
                ""))
            (revealer 
                :transition "slideleft"
                :reveal bat_rev
                :duration "350ms"
                (label
                    :class "val-text"
                    :text "${battery}%")))))

;; MEMORY
(defwidget mem []
(eventbox 
    :onhover "${EWW_CMD} update mem_rev=true"
	:onhoverlost "${EWW_CMD} update mem_rev=false"
    (box 
        :class "mem_module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3"
        (circular-progress 
            :value memory
            :class "membar"
            :thickness 2
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${memory}% ram"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :show_truncated false
                :wrap false
                ""))
            (revealer 
                :transition "slideleft"
                :reveal mem_rev
                :duration "350ms"
                (label
                    :class "val-text"
                    :text "${memory}%")))))

;; MEMORY
(defwidget cpu []
(eventbox 
    :onhover "${EWW_CMD} update cpu_rev=true"
	:onhoverlost "${EWW_CMD} update cpu_rev=false"
    (box 
        :class "cpu_module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3"
        (circular-progress 
            :value cpu
            :class "cpubar"
            :thickness 2
            (button 
                :class "iconcpu"
                :limit-width 2
                :tooltip "using ${cpu}% cpu"
                :show_truncated false
                :wrap false
                ""))
            (revealer 
                :transition "slideleft"
                :reveal cpu_rev
                :duration "350ms"
                (label  
                    :class "val-text"
                    :text "${cpu}%")))))

;; BAR
(defwidget right []
(box 
    :orientation "h" 
	:space-evenly false  
    :halign "end"
	:class "right_modules"
    (wifi)
    (volume)
    (bright)
    (bat)
    (mem)
    (cpu)))

(defwidget left []
(box 
    :orientation "h" 
	:space-evenly false  
    :halign "start"
	:class "left_modules"
    (workspaces)))

(defwidget center []
(box 
    :orientation "h" 
	:space-evenly false  
    :halign "center"
	:class "center_modules"
    (clock_module)))

;; BAR
(defwindow bar
    :monitor 0
    :geometry
        (geometry 
            :x "0%"
            :y "0%"
            :width "98%"
            :height "0%"
            :anchor "top center")
        :stacking "bg"
        :exclusive true
        :windowtype "dock"
    (box 
        :class "bar_class"
        :orientation "h"
        (left)
        (center)
        (right)))
