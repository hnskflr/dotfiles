local set = vim.opt
set.tabstop = 4
set.shiftwidth = 4
set.softtabstop = 4
set.expandtab = true

set.number = true
set.relativenumber = true

set.mouse = "a"

vim.o.undofile = true
vim.o.noundofile = false

vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

vim.opt.termguicolors = true

vim.g.mapleader = " "

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
    {
        "ms-jpq/coq_nvim", 
        branch = "coq", 
        init = function() vim.g.coq_settings = { auto_start = true } end
    },
    {"ms-jpq/coq.artifacts", branch = "artifacts"},
    {"ms-jpq/coq.thirdparty", branch = "3p"},
    "williamboman/mason.nvim",
    'nvim-treesitter/nvim-treesitter',
    'nvim-tree/nvim-web-devicons',
    {   
        'nvimdev/lspsaga.nvim',
        config = function()
            require('lspsaga').setup({})
        end
    },
    "JoosepAlviste/palenightfall.nvim",
    {"nvim-treesitter/nvim-treesitter", build = ":TSUpdate"},
    {'echasnovski/mini.nvim', version = false},
    {
        'nvim-telescope/telescope.nvim', tag = '0.1.2',
        dependencies = { 'nvim-lua/plenary.nvim' }
    },
    {
        'goolord/alpha-nvim',
        dependencies = { 'nvim-tree/nvim-web-devicons' },
        config = function ()
            require'alpha'.setup(require'alpha.themes.dashboard'.config)
        end
    },
    "nvim-tree/nvim-tree.lua",
    "neovim/nvim-lspconfig",
    "dart-lang/dart-vim-plugin",
    {
        'akinsho/bufferline.nvim', 
        version = "*", 
        dependencies = 'nvim-tree/nvim-web-devicons'
    }
})

require("mason").setup()
require('palenightfall').setup({
    transparent = true,
})
require("bufferline").setup{}

-- mini
require('mini.comment').setup()
require("mini.pairs").setup()

require("nvim-tree").setup()

require("telescope").setup()

local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})

vim.keymap.set('n', '<leader>t', (require "nvim-tree.api").tree.toggle)

vim.keymap.set("n", "<Leader><Tab>", ":BufferLineCycleNext<CR>")
vim.keymap.set("n", "<Leader>b<Tab>", ":BufferLineCyclePrev<CR>")

local coq = require "coq"

-- lsp setup
local lspconfig = require('lspconfig')
lspconfig.pyright.setup(coq.lsp_ensure_capabilities())
lspconfig.dartls.setup(coq.lsp_ensure_capabilities())

vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)

vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
    vim.keymap.set('n', '<space>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, opts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
    vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '<space>f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})
